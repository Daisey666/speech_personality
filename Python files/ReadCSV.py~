__author__ = 'Euan Cockburn'
'speech personality project'
'File for reading the contents of the csv file'

import csv
import glob

def ExtractCSV():
	filenames = []
				
	for files in glob.glob("/home/euan/Documents/university/year4/speech_personality/CSVs/eGeMAPSv01a/*.csv"):
		filenames.append(files)
	features = []
	
	for name in filenames:
		with open(name, 'rb') as f:
			reader = csv.reader(f)
			for row in reader:
				# If the row is empty move on to next row
				if row == []:
					continue
				# If the row does not start with 'unknown' move to next row
				elif row[0] != "'unknown'":
					continue
				# If the row does start with an 'unknown' begin reading the content of the row
				else:
					results = {	'Name': name[73:-8], 
						   	'F0semitoneamean': int(float(row[1])), 
						   	'F0semitonestddevNorm': int(float(row[2])), 
						   	'F0semitonepercentile20':int(float(row[3])),
							'F0semitonepercentile50':int(float(row[4])),
							'F0semitonepercentile80':int(float(row[5])), 
							'F0semitonepctlrange0_2':int(float(row[6])), 
							'F0semitonemeanRisingSlope':int(float(row[7])), 
							'F0semitonestddevRisingSlope':int(float(row[8])), 
							'F0semitonemeanFallingSlope':int(float(row[9])), 
							'F0semitonestddevFallingSlope':int(float(row[10])), 
							'Loudnessamean':int(float(row[11])),
							'LoudnessstddevNorm':int(float(row[12])),
							'Loudnesspercentile20':int(float(row[13])), 
							'Loudnesspercentile50':int(float(row[14])), 
							'Loudnesspercentile80':int(float(row[15])),
							'Loudnesspctlrange0_2':int(float(row[16])), 
							'LoudnessmeanRisingSlope':int(float(row[17])), 
							'LoudnessstddevRisingSlope':int(float(row[18])),
							'LoudnessmeanFallingSlope':int(float(row[19])), 
							'LoudnessstddevFallingSlope':int(float(row[20])), 
							'SpectralFluxmean':int(float(row[21])), 
							'SpectralFluxstddev':int(float(row[22])), 
							'Mfcc1mean':int(float(row[23])), 
							'Mfcc1stddevNorm':int(float(row[24])), 
							'Mfcc2mean':int(float(row[25])), 
							'Mfcc2stddevNorm':int(float(row[26])), 
							'Mfcc3mean':int(float(row[27])), 
							'Mfcc3stddevNorm':int(float(row[28])), 
							'Mfcc4mean':int(float(row[29])), 
							'Mfcc4stddevNorm':int(float(row[30])), 
							'JitterLocalmean':int(float(row[31])), 
							'JitterLocalstddev':int(float(row[32])), 
							'ShimmerLocalmean':int(float(row[33])), 
							'ShimmerLocalstddev':int(float(row[34])), 
							'HNRmean':int(float(row[35])), 
							'HNRstddev':int(float(row[36])), 
							'LogRelF0H1H2mean': int(float(row[37])), 
							'LogRelF0H1H2stddev': int(float(row[38])), 
							'F1frequencymean': int(float(row[39])), 
							'F1frequencystddev': int(float(row[40])), 
							'F1bandwidthmean': int(float(row[41])), 
							'F1bandwidthstddev': int(float(row[42])), 
							'F1amplitudeLogRelF0mean': int(float(row[43])), 
							'F1amplitudeLogRelF0stddev': int(float(row[44])), 
							'F2frequencymean': int(float(row[45])), 
							'F2frequencystddev': int(float(row[46])), 
							'F2bandwidthmean': int(float(row[47])), 
							'F2bandwidthstddev': int(float(row[48])), 
							'F2amplitudeLogRelF0mean': int(float(row[49])), 
							'F2amplitudeLogRelF0stddev': int(float(row[50])), 
							'F3frequencymean': int(float(row[51])), 
							'F3frequencystddev': int(float(row[52])), 
							'F3bandwidthmean': int(float(row[53])), 
							'F3bandwidthstddev': int(float(row[54])), 
							'F3amplitudeLogRelF0mean': int(float(row[55])), 
							'F3amplitudeLogRelF0stddev': int(float(row[56])), 
							'AlphaRatioVmean': int(float(row[57])), 
							'AlphaRatioVstddev': int(float(row[58])), 
							'HammarbergIndexVmean': int(float(row[59])), 
							'HammarbergIndexstddev': int(float(row[60])), 
							'SlopeV0_500mean': int(float(row[61])), 
							'SlopeV0_500stddev': int(float(row[62])), 
							'SlopeV500_1500mean': int(float(row[63])), 
							'SlopeV500_1500stddev': int(float(row[64])), 
							'SpectralFluxVmean': int(float(row[65])), 
							'SpectralFluxVstddev': int(float(row[66])), 
							'Mfcc1Vmean': int(float(row[67])), 
							'Mfcc1Vstddev': int(float(row[68])), 
							'Mfcc2Vmean': int(float(row[69])), 
							'Mfcc2Vstddev': int(float(row[70])), 
							'Mfcc3Vmean': int(float(row[71])), 
							'Mfcc3Vstddev': int(float(row[72])), 
							'Mfcc4Vmean': int(float(row[73])), 
							'Mfcc4Vstddev': int(float(row[74]))}

					features.append(results) 

	return features
